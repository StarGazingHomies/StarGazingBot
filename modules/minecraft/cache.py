"""
Simple file-based caching for Minecraft usernames
"""

import logging
import os
import stat
import time

import yaml

logger = logging.getLogger('cache')

class UsernameCache():
    """Static method class for access to the username cache"""
    @staticmethod
    def read():
        """Opens the cache file for reading. Use a with statement."""
        return open(os.path.join(os.getcwd(), "cache","usernames.yaml"), 'r', encoding='utf-8')

    @staticmethod
    def write():
        """Opens the cache file for writing. Use a with statement."""
        return open(os.path.join(os.getcwd(), "cache","usernames.yaml"), 'w', encoding='utf-8')

    @staticmethod
    def get():
        """Loads the cache file and returns its contents."""
        try:
            with UsernameCache.read() as ucf:
                #It is generated by the bot by default.
                useridmap = yaml.load(ucf, Loader=yaml.FullLoader)
            return useridmap
        except FileNotFoundError:
            logger.warning("The username cache can't be found.")
            UsernameCache.checkcache()
            return {}

    @staticmethod
    def save(mapping):
        """Saves a new map as the cache file."""
        with UsernameCache.write() as ucf:
            yaml.dump(mapping, ucf)

    @staticmethod
    def reset():
        """Clears the cache file."""
        with UsernameCache.write() as ucf:
            yaml.dump({}, ucf)

    @staticmethod
    def checkcache():
        """Checks for the existence of a cache file.
Will delete old cache files that are over 1d old."""
        try:
            stats = os.stat(os.path.join(os.getcwd(), ".cache\\usernames.yaml"))
            accesstime = stats[stat.ST_ATIME]
            if time.time()-accesstime > 86400:
                #The update interval for each username is by default a day.
                UsernameCache.reset()
            return True
        except FileNotFoundError:
            #No warning message here, since this is performed during boot up for checking.
            UsernameCache.reset()
            return False

    @staticmethod
    def update(username, uuid, timestamp=time.time()):
        """Updates the cache file after obtaining a pair of a username and their respective uuid.
Params:
username / uuid - matching pair of a username and their id
timestamp       - obtained time of the username and uuid, defaults to time.time()"""
        #Do this if weird capitalization
#        username = username.lower()
        try:
            useridmap = UsernameCache.get()
            useridmap[username] = (uuid, timestamp)
            useridmap[uuid] = (username, time.time())
            UsernameCache.save(useridmap)
            return True
        except FileNotFoundError:
            logger.warning(message="The username cache can't be found.")
            useridmap = {username:(uuid, timestamp), uuid:(username, time.time())}
            UsernameCache.save(useridmap)
            return False

    @staticmethod
    def lookup(name_or_id):
        """Checks the cache file for possible usernames within an update interval.
Params:
username / uuid - provide either the username or uuid of the player searching for
updateinterval - maximum length before username is updated FOR THIS CALL. -1 to skip check"""
        updateinterval = 86400
        try:
            useridmap = UsernameCache.get()
            try:
                result = useridmap[name_or_id]
                if updateinterval != -1 and time.time() - result[1] > updateinterval:
                    logger.info("[Username Cache] Deleting values %s, %s\
since they haven't been updated in the last day.", result[0], name_or_id)
                    useridmap.pop(result[0])
                    useridmap.pop(name_or_id)
                    UsernameCache.save(useridmap)
                    return False
                return result[0]
            except KeyError:
                return False
            except TypeError:
                logger.warning("The username cache has been corrupted. Auto resetting file.")
                UsernameCache.reset()
                return False
        except FileNotFoundError:
            logger.warning("The username cache has been removed. Auto resetting file.")
            UsernameCache.reset()
            return False
